Notes from Sean Zicari, "Use Curses, Don't Swear," https://www.youtube.com/watch?v=eN1eZtjLEnU (2013)

CLI: command-line interface

midnight commander
tput
:colorscheme blue
export terminal.txt

list all terminals?

escape sequences

ECMA-48
termcap
terminfo

line discipline

"raw vs. cooked"


# begin video c. 13:00
# https://www.youtube.com/watch?feature=player_detailpage&v=eN1eZtjLEnU#t=775
import curses
from urllib2 import urlopen
from HTMLParser import HTMLParser
from simplejson import loads

def get_new_joke():
    """Get joke on line and prepare it for printing."""
    joke_json = loads(urlopen('http://api.icrdb.com/jokes/random').read())
    return HTMLParses().unescape(joke_json['value']['joke']).encode('utf-8')

# instantiate standard screen object
stdscr = curses.initscr()

# properly initialize screen
curses.noecho()
curses.cbreak()
curses.curs_set(0)

# check for and begin color support
if curses.has_colors():
    curses.start_color()

# optionally enable the F-1 etc., which are multi-byte
strdscr.keypad(1)

# initialize desired color combinations (#, foreground, background)
curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)

# begin program
# create UI
stdscr.addstr('RANDOM QUOTES', curses.A_REVERSE) # content of top line
stdscr.chgat(-1, curses.A_REVERSE) # "fill out rest of line"

# menu at bottom
stdscr.addstr(curses.LINES-1, 0, "Press 'R' to request a new quote, 'Q' to quit.")

# color and boldface the R (character 7 from 0, 1 char long) and Q (char 35)
stdscr.chgat(curses.LINES-1, 7, 1, curses.A_BOLD | curses.color_pair(2))
stdscr.chgat(curses.LINES-1, 35, 1, curses.A_BOLD | curses.color_pair(1))

# set up window holding the random quotes; use border for visibility; 
quote_window = curses.newwin(curses.LINES-2, curses.COLS, 1, 0)

# set up sub-window holding text; invisible hence dotted line border
# things must be refreshed in the correct order
# sub-window is necessary in order not to overwrite main window content
quote_text_window = quote_window.subwin(curses.LINES-6, curses.COLS-4, 3, 2)
quote_text_window.addstr("Press 'R' to get first quote.")

# draw border around main quote window
quote_window.box()

# update internal window data structures
stdscr.noutrefresh() # done first, prevent standard screen overwriting others
quote_window.noutrefresh()

# redraw screen
curses.doupdate()

# create event loop
while True:
    c = quote_window.getch()
    if c == ord('r') or c == ord('R'):
        quote_text_window.clear()
        quote_text_window.addstr('Getting quote...', curses.color_pair(3))
        quote_text_window.refresh()
        quote_text_window.clear()
        quote_text_window.addstr(get_new_joke())
    elif c == ord('q') or c == ord('Q'):
        break
    # refresh windows from bottom up, to avoid flickering
    stdscr.noutrefresh()
    quote_window.noutrefresh()
    quote_text_window.noutrefresh()
    curses.doupdate()

# if broken out of loop, restore terminal settings
curses.nocbreak() # end character-break mode
#stdscr.keypad(0)
curses.echo()
curses.curs_set(1)

# destroy window
curses.endwin()

********
# at video c. 18:00
# https://www.youtube.com/watch?feature=player_detailpage&v=eN1eZtjLEnU#t=1083

urwid: replacement for ncurses
layered widgets, composed: "the decorator pattern in action"
event loops

import urwid
from urllib2 import urlopen
from HTMLParser import HTMLParser
from simplejson import loads

# set up our color schemes
palette = [('titlebar', 'black', 'white'),
        ('refresh button', 'dark green,bold', 'black'),
        ('quit button', 'dark red,bold', 'black'),
        ('getting quote', dark blue', 'black'),
        ]

# create 'RANDOM QUOTES' header
header_test = urwid.Text(u'RANDOM QUOTES') # text widget
header = urwid.AttrMap(header_text, 'titlebar') # decorate into attribute map

# create bottom menu; text widget containing iterable; tuples are used to pinpoint formatting of single characters
menu = urwid.Text(
        [u'Press (', ('refresh button', u'R'),
        u') to get a new quote. Press (', ('quit button', u'Q'),
        u') to quit.'])

# use widgets to create UI more concisely than in curses
# create text box widget
quote_text = urwid.Text(u'Prese (R) to get your first quote.')
# decorate with filler widget with invisible border
quote_filler = urwid.Filler(quote_text, valign='top', top=1, bottom=1)
# decorate that into padding widget
v_padding = urwid.Padding(quote_filler, left=1, right=1)
# decorate that with visible border
quote_box = urwid.LineBox(v_padding)

# assemble the widgets into widget-layout frame
layout = urwid.Frame(header=header, body=quote_box, footer=menu)

def get_new_joke():
    """Get joke on line and prepare it for printing."""
    joke_json = loads(urlopen('http://api.icrdb.com/jokes/random').read())
    return HTMLParses().unescape(joke_json['value']['joke']).encode('utf-8')

# handle key presses; one function to handle all input
def handle_input(key):
    if key == 'r' or key == 'R':
        quote_box.base_widget.set_text(('getting quote', 'Getting new quote'))
        main_loop.draw_screen()
        quote_box.base_widget.set_text(get_new_joke())
    elif key == 'q' or key == 'Q':
        raise urwid.ExitMainLoop()

# create event loop
main_loop = urwid.MainLoop(layout, palett, unhandled_input=handle-input)

# run program
main_loop.run()

*****

# resources
# https://www.youtube.com/watch?feature=player_detailpage&v=eN1eZtjLEnU#t=1306

Urwid:
    documentation: excess.org/urwid/docs
    tutorials: excess.org/urwid/docs/tutorial/index.html#urwid-tutorial
    manual: excess.org/urwid/docs/manual/index.html#urwid-manual

